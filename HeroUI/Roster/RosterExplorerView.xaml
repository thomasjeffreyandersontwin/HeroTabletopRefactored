<UserControl x:Class="HeroVirtualTabletop.Roster.RosterExplorerView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:roster="clr-namespace:HeroVirtualTabletop.Roster"
             xmlns:local="clr-namespace:HeroUI"
             xmlns:cal="http://www.caliburnproject.org"
             xmlns:characters="clr-namespace:HeroVirtualTabletop.ManagedCharacter;assembly=HeroVirtualTabletop"
             xmlns:attacks="clr-namespace:HeroVirtualTabletop.Attack;assembly=HeroVirtualTabletop"
             xmlns:abilities="clr-namespace:HeroVirtualTabletop.AnimatedAbility;assembly=HeroVirtualTabletop"
             xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
             xmlns:behaviors="clr-namespace:Framework.WPF.Behaviors;assembly=Framework.WPF"
             xmlns:bindings="clr-namespace:Framework.WPF.Binding;assembly=Framework.WPF"
             xmlns:extensions="clr-namespace:Framework.WPF.Extensions;assembly=Framework.WPF"
             xmlns:library="clr-namespace:Framework.WPF.Library;assembly=Framework.WPF"
             mc:Ignorable="d" Loaded="RosterExplorerView_Loaded">
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/HeroResourceDictionary.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <local:BooleanToVisibilityConverter x:Key="boolToVisibilityConverter"/>
            <local:DistanceCounterTextColorConverter x:Key="DistanceCounterTextColorConverter"/>
            <characters:CharacterComparer x:Key="characterComparer"/>
            <attacks:AttackInstructionsDefenderWithTargetCharacterComparer x:Key="AttackInstructionsDefenderWithTargetCharacterComparer"/>
            <attacks:UnderAttackAnimatableCharacterStateToVisibilityConverter x:Key="UnderAttackAnimatableCharacterStateToVisibilityConverter"/>
            <attacks:ActiveStateToVisibilityConverter x:Key="ActiveStateToVisibilityConverter"/>
            <CollectionViewSource 
                x:Key="ParticipantsView" 
                Source="{Binding DataContext.Roster.Participants, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type roster:RosterExplorerView}}}">

                <!-- Grouping -->
                <CollectionViewSource.GroupDescriptions>
                    <PropertyGroupDescription PropertyName="RosterParent.Name" />
                </CollectionViewSource.GroupDescriptions>
            </CollectionViewSource>
            <bindings:BindingProxy x:Key="BindingProxy" Data="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=roster:RosterExplorerView}, Path=DataContext}"/>
            <ContextMenu x:Key="RosterExplorerMenu">
                <MenuItem Header="Activate Character" cal:Message.Attach="ActivateCharacter" cal:Action.TargetWithoutContext="{Binding Source={StaticResource BindingProxy}, Path=Data}"></MenuItem>
                <MenuItem Header="Activate Crowd as Gang" cal:Message.Attach="ActivateCrowdAsGang" cal:Action.TargetWithoutContext="{Binding Source={StaticResource BindingProxy}, Path=Data}"></MenuItem>
                <MenuItem Header="Activate as Gang" cal:Message.Attach="ActivateSelectedCharactersAsGang" cal:Action.TargetWithoutContext="{Binding Source={StaticResource BindingProxy}, Path=Data}"></MenuItem>
                <MenuItem Header="Abort" cal:Message.Attach="Abort" cal:Action.TargetWithoutContext="{Binding Source={StaticResource BindingProxy}, Path=Data}"></MenuItem>
                <MenuItem Header="Edit Character" cal:Message.Attach="EditRosterMember" cal:Action.TargetWithoutContext="{Binding Source={StaticResource BindingProxy}, Path=Data}"></MenuItem>
                <MenuItem Header="Save Position" cal:Message.Attach="SavePosition" cal:Action.TargetWithoutContext="{Binding Source={StaticResource BindingProxy}, Path=Data}"></MenuItem>
                <MenuItem Header="Place" cal:Message.Attach="Place" cal:Action.TargetWithoutContext="{Binding Source={StaticResource BindingProxy}, Path=Data}"></MenuItem>
                <MenuItem Header="Spawn" cal:Message.Attach="Spawn" cal:Action.TargetWithoutContext="{Binding Source={StaticResource BindingProxy}, Path=Data}"></MenuItem>
                <MenuItem Header="Toggle Target" cal:Message.Attach="ToggleTargeted" cal:Action.TargetWithoutContext="{Binding Source={StaticResource BindingProxy}, Path=Data}"></MenuItem>
                <MenuItem Header="Move Camera to Target" cal:Message.Attach="MoveCameraToTarget" cal:Action.TargetWithoutContext="{Binding Source={StaticResource BindingProxy}, Path=Data}"></MenuItem>
                <MenuItem Header="Move Target to Camera" cal:Message.Attach="MoveToCamera" cal:Action.TargetWithoutContext="{Binding Source={StaticResource BindingProxy}, Path=Data}"></MenuItem>
                <MenuItem Header="Maneuver with camera" cal:Message.Attach="ToggleManeuverWithCamera" cal:Action.TargetWithoutContext="{Binding Source={StaticResource BindingProxy}, Path=Data}"></MenuItem>
                <MenuItem Header="Clear From Desktop" cal:Message.Attach="ClearFromDesktop" cal:Action.TargetWithoutContext="{Binding Source={StaticResource BindingProxy}, Path=Data}"></MenuItem>
                <MenuItem Header="Reset Orientation" cal:Message.Attach="ResetOrientation" cal:Action.TargetWithoutContext="{Binding Source={StaticResource BindingProxy}, Path=Data}"></MenuItem>
            </ContextMenu>
            <ContextMenu x:Key="AttackMenu">
                <MenuItem Header="Target" cal:Message.Attach="AddSelectedAsAttackTarget" cal:Action.TargetWithoutContext="{Binding Source={StaticResource BindingProxy}, Path=Data}"></MenuItem>
                <MenuItem Header="Target and Execute" cal:Message.Attach="AddSelectedAsAttackTargetAndExecute" cal:Action.TargetWithoutContext="{Binding Source={StaticResource BindingProxy}, Path=Data}"></MenuItem>
                <MenuItem Header="Target and Execute Crowd" cal:Message.Attach="AddSelectedCrowdAsAttackTargetAndExecute" cal:Action.TargetWithoutContext="{Binding Source={StaticResource BindingProxy}, Path=Data}"></MenuItem>
                <MenuItem Header="Execute Sweep" cal:Message.Attach="ExecuteSweepAttack" cal:Action.TargetWithoutContext="{Binding Source={StaticResource BindingProxy}, Path=Data}"></MenuItem>
                <MenuItem Header="Abort" cal:Message.Attach="Abort" cal:Action.TargetWithoutContext="{Binding Source={StaticResource BindingProxy}, Path=Data}"></MenuItem>
            </ContextMenu>
        </ResourceDictionary>
    </UserControl.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition />
        </Grid.RowDefinitions>
        <Grid>
            <Grid.Resources>
                <Style TargetType="Button" BasedOn="{StaticResource ResourceKey=IconButton}"></Style>
            </Grid.Resources>
            <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition/>
                <RowDefinition/>
            </Grid.RowDefinitions>
            <WrapPanel>
                <Button x:Name="SavePosition" Content="&#xF0C7;" ToolTip="Save Position (Ctrl+Shift+P)"/>
                <Button x:Name="Place" Content="&#xf041;" ToolTip="Place (Ctrl+P)"/>
                <Button x:Name="Spawn" Content="&#xf08e;" ToolTip="Spawn (Ctrl+S)"/>
                <Button x:Name="ToggleTargeted" Content="&#xf05b;" ToolTip="Toggle Target (Ctrl+T)"/>
                <Button x:Name="ToggleManeuverWithCamera" Content="&#xf030;" ToolTip="Maneuver with camera (Ctrl+M)"/>
                <Button x:Name="CycleCommandsThroughCrowd" Content="&#xf1da;" ToolTip="Cycle Commands (Ctrl+Shift+C)">
                    <Button.Style >
                        <Style TargetType="{x:Type Button}" BasedOn="{StaticResource IconButton}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=Roster.CommandMode}" Value="Standard">
                                    <Setter Property="Opacity" Value="0.5"/>
                                </DataTrigger>
                                <DataTrigger  Binding="{Binding Path=Roster.CommandMode}" Value="CycleCharacter">
                                    <Setter Property="Opacity" Value="1"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>
                <Button x:Name="ScanAndFixMemory" Content="&#xf26c;" ToolTip="Scan and Fix Memory (Ctrl+K)"/>
            </WrapPanel>
            <WrapPanel Grid.Row="1">
                <Button x:Name="MoveCameraToTarget" Content="&#xf064;" ToolTip="Move Camera to Target (Ctrl+F)"/>
                <Button x:Name="MoveToCamera" Content="&#xf112;" ToolTip="Move Target to Camera (Ctrl+Shift+F)"/>
                <Button x:Name="Teleport" Content="&#xf122;" ToolTip="Teleport Target to Camera (Ctrl+L)"/>
                <Button x:Name="ToggleActivate" Content="&#xf00c;" ToolTip="Toggle Activate Character (Ctrl+Enter)"/>
                <Button x:Name="ClearFromDesktop" Content="&#xf235;" ToolTip="Clear From Desktop (Ctrl+Shift+Minus/Del)"/>
                <Button x:Name="ResetOrientation" Content="&#xf1ae;" ToolTip="Reset Orientation (Ctrl+O)" />
            </WrapPanel>
            <WrapPanel Grid.Row="2">
                <Button x:Name="ToggleTargetOnMouseHover" Content="&#xf140;" ToolTip="Toggle Target on Hover (Ctrl+H)">
                    <Button.Style >
                        <Style TargetType="{x:Type Button}" BasedOn="{StaticResource IconButton}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=TargetOnHover}" Value="False">
                                    <Setter Property="Opacity" Value="0.5"/>
                                </DataTrigger>
                                <DataTrigger  Binding="{Binding Path=TargetOnHover}" Value="True">
                                    <Setter Property="Opacity" Value="1"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>
                <Button x:Name="ToggleGangMode" Content="&#xf1a0;" ToolTip="Toggle Gang Mode (Ctrl+U)">
                    <Button.Style >
                        <Style TargetType="{x:Type Button}" BasedOn="{StaticResource IconButton}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=Roster.SelectedParticipantsInGangMode}" Value="False">
                                    <Setter Property="Opacity" Value="0.5"/>
                                </DataTrigger>
                                <DataTrigger  Binding="{Binding Path=Roster.SelectedParticipantsInGangMode}" Value="True">
                                    <Setter Property="Opacity" Value="1"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>
                <Button x:Name="ToggleRelativePositioning" Content="&#xf021;" ToolTip="Toggle Relative Positioning (Ctrl+R)">
                    <Button.Style >
                        <Style TargetType="{x:Type Button}" BasedOn="{StaticResource IconButton}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=Roster.UseOptimalPositioning}" Value="True">
                                    <Setter Property="Opacity" Value="0.5"/>
                                </DataTrigger>
                                <DataTrigger  Binding="{Binding Path=Roster.UseOptimalPositioning}" Value="False">
                                    <Setter Property="Opacity" Value="1"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>
                <Button x:Name="ToggleSpawnOnClick" Content="&#xf25a;" ToolTip="Toggle Spawn on Click (Ctrl+J)">
                    <Button.Style >
                        <Style TargetType="{x:Type Button}" BasedOn="{StaticResource IconButton}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=Roster.SpawnOnClick}" Value="False">
                                    <Setter Property="Opacity" Value="0.5"/>
                                </DataTrigger>
                                <DataTrigger  Binding="{Binding Path=Roster.SpawnOnClick}" Value="True">
                                    <Setter Property="Opacity" Value="1"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>
                <Button x:Name="ToggleCloneAndSpawn" Content="&#xf0c5;" ToolTip="Toggle Clone and Spawn (Ctrl+C)">
                    <Button.Style >
                        <Style TargetType="{x:Type Button}" BasedOn="{StaticResource IconButton}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=Roster.CloneAndSpawn}" Value="False">
                                    <Setter Property="Opacity" Value="0.5"/>
                                </DataTrigger>
                                <DataTrigger  Binding="{Binding Path=Roster.CloneAndSpawn}" Value="True">
                                    <Setter Property="Opacity" Value="1"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>
                <Button x:Name="ToggleOverheadMode" Content="&#xf03d;" ToolTip="Toggle Overhead Mode (Ctrl+B)">
                    <Button.Style >
                        <Style TargetType="{x:Type Button}" BasedOn="{StaticResource IconButton}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=Roster.OverheadMode}" Value="False">
                                    <Setter Property="Opacity" Value="0.5"/>
                                </DataTrigger>
                                <DataTrigger  Binding="{Binding Path=Roster.OverheadMode}" Value="True">
                                    <Setter Property="Opacity" Value="1"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>
                <Button x:Name="SequenceView" Content="&#xf28a;" ToolTip="Toggle Sequence View(Ctrl+>)">
                    <Button.Style >
                        <Style TargetType="{x:Type Button}" BasedOn="{StaticResource IconButton}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=IsSequenceViewActive}" Value="False">
                                    <Setter Property="Opacity" Value="0.5"/>
                                </DataTrigger>
                                <DataTrigger  Binding="{Binding Path=IsSequenceViewActive}" Value="True">
                                    <Setter Property="Opacity" Value="1"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>
            </WrapPanel>
        </Grid>
        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>
            <Button Grid.Column="0" Style="{StaticResource IconButton}" HorizontalAlignment="Left" Content="&#xf0e4;" ToolTip="Reset Counter (Ctrl+K)" />
            <TextBlock Name="txtDistanceCounter"  Grid.Column="1" HorizontalAlignment="Stretch" VerticalAlignment="Center"                  
                         Text="{Binding Path=CurrentDistanceCountingCharacter.CurrentDistanceCount}">
                <TextBlock.Foreground>
                    <MultiBinding Converter="{StaticResource DistanceCounterTextColorConverter}">
                        <Binding Path="CurrentDistanceCountingCharacter.CurrentDistanceCount"/>
                        <Binding Path="CurrentDistanceCountingCharacter.CurrentDistanceLimit"/>
                    </MultiBinding>
                </TextBlock.Foreground>
            </TextBlock>
            <TextBlock Name="txtCurrentPhase"  Grid.Column="2" HorizontalAlignment="Right" VerticalAlignment="Center" Foreground="White"                    
                         Text="{Binding Path=CurrentPhase}" Visibility="{Binding IsSequenceViewActive, Converter={StaticResource BooleanToVisibilityConverter}}"/>
        </Grid>
        <library:MultiSelectListBox x:Name="RosterViewListBox" Grid.Row="2" ItemsSource="{Binding Source={StaticResource ResourceKey=ParticipantsView}}"
                    AllowDrop="True" SelectionMode="Extended" Background="Transparent" TextElement.Foreground="White" Drop="RosterViewListBox_Drop" DragOver="RosterViewListBox_DragOver"
                     SelectedItemsList="{Binding SelectedParticipants, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" BorderBrush="Transparent" BorderThickness="0"
                                    extensions:DragDropExtension.ScrollOnDragDrop="True">
            <ListBox.GroupStyle>
                <GroupStyle>
                    <GroupStyle.ContainerStyle>
                        <Style TargetType="{x:Type GroupItem}">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate>
                                        <Grid>
                                            <ToggleButton Name="toggleButton" Style="{StaticResource ToggleButtonSmallStyle}" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0 9 1 0" IsChecked="{Binding ElementName=ExpanderOptionGroup, Path=IsExpanded}" 
                                                            Background="Transparent" BorderBrush="Transparent" Panel.ZIndex="10">
                                            </ToggleButton>
                                            <GroupBox Header="{Binding Name}" x:Name="grpBoxOptionGroup" Style="{StaticResource GroupBoxWithBlueBorderStyle}">
                                                <GroupBox.HeaderTemplate>
                                                    <DataTemplate>
                                                        <Border Height="20" BorderBrush="AliceBlue" PreviewMouseDown="TextBlock_PreviewMouseDown">
                                                            <TextBlock  Text="{Binding}" PreviewMouseDown="TextBlock_PreviewMouseDown">
                                                            </TextBlock>
                                                            <Border.Style>
                                                                <Style TargetType="Border">
                                                                    <Style.Triggers>
                                                                        <DataTrigger Binding="{Binding Path=DataContext.ShowAttackContextMenu, RelativeSource={RelativeSource FindAncestor, AncestorType=roster:RosterExplorerView}}" Value="True">
                                                                            <Setter Property="ContextMenu" Value="{StaticResource ResourceKey=AttackMenu}" />
                                                                        </DataTrigger>
                                                                        <DataTrigger Binding="{Binding Path=DataContext.ShowAttackContextMenu, RelativeSource={RelativeSource FindAncestor, AncestorType=roster:RosterExplorerView}}" Value="False">
                                                                            <Setter Property="ContextMenu" Value="{StaticResource ResourceKey=RosterExplorerMenu}" />
                                                                        </DataTrigger>
                                                                    </Style.Triggers>
                                                                </Style>
                                                            </Border.Style>
                                                        </Border>

                                                    </DataTemplate>
                                                </GroupBox.HeaderTemplate>
                                                <Grid>
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition Height="Auto"/>
                                                        <RowDefinition/>
                                                    </Grid.RowDefinitions>
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="Auto"/>
                                                        <ColumnDefinition/>
                                                    </Grid.ColumnDefinitions>

                                                    <Expander Name="ExpanderOptionGroup" Grid.Row="1" Grid.ColumnSpan="2" Style="{StaticResource ExpanderWithoutToggleButtonStyle}"
                                                      OverridesDefaultStyle="True" VerticalAlignment="Top" Expanded="ExpanderOptionGroup_ExpansionChanged" Collapsed="ExpanderOptionGroup_ExpansionChanged"
                                                      >
                                                        <ItemsPresenter PreviewMouseDown="ListViewItem_PreviewMouseDown"></ItemsPresenter>
                                                    </Expander>
                                                </Grid>
                                            </GroupBox>
                                        </Grid>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </GroupStyle.ContainerStyle>
                </GroupStyle>
            </ListBox.GroupStyle>
            <ListBox.ItemTemplate>
                <DataTemplate>
                    <Grid  HorizontalAlignment="Stretch">
                        <Grid.Style>
                            <Style TargetType="{x:Type Grid}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=DataContext.ShowAttackContextMenu, RelativeSource={RelativeSource FindAncestor, AncestorType=roster:RosterExplorerView}}" Value="True">
                                        <Setter Property="ContextMenu" Value="{StaticResource ResourceKey=AttackMenu}" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Path=DataContext.ShowAttackContextMenu, RelativeSource={RelativeSource FindAncestor, AncestorType=roster:RosterExplorerView}}" Value="False">
                                        <Setter Property="ContextMenu" Value="{StaticResource ResourceKey=RosterExplorerMenu}" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Grid.Style>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition ></ColumnDefinition>
                            <ColumnDefinition Width="auto"></ColumnDefinition>
                            <ColumnDefinition Width="auto"></ColumnDefinition>
                            <ColumnDefinition Width="auto"></ColumnDefinition>
                        </Grid.ColumnDefinitions>
                        <TextBlock Name="txtBlockCharacterName" Text="{Binding Name}" Grid.Column="0" VerticalAlignment="Center" HorizontalAlignment="Stretch"/>
                        <TextBlock Grid.Column="1" FontFamily="{StaticResource ResourceKey=FontFamily_FontAwesome}" Text="&#xf00c;" VerticalAlignment="Center">
                            <TextBlock.Style>
                                <Style TargetType="TextBlock">
                                    <Setter Property="Visibility" Value="Collapsed"></Setter>
                                    <Style.Triggers>
                                        <DataTrigger Value="True" Binding="{Binding Path=IsActive}">
                                            <Setter Property="Visibility" Value="Visible"></Setter>
                                        </DataTrigger>
                                        <DataTrigger Value="True" Binding="{Binding Path=IsGangLeader}">
                                            <Setter Property="Foreground" Value="Red"/>
                                        </DataTrigger>
                                        <DataTrigger Value="False" Binding="{Binding Path=IsGangLeader}">
                                            <Setter Property="Foreground" Value="Green"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                        <StackPanel Grid.Column="2" Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Center">
                            <TextBlock Grid.Column="2" FontFamily="{StaticResource FontFamily_FontAwesome}" 
                                   Text="&#xf0e7;" 
                                   HorizontalAlignment="Right" VerticalAlignment="Center">
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                        <Style.Triggers>
                                            <DataTrigger Value="True">
                                                <DataTrigger.Binding>
                                                    <MultiBinding Converter="{StaticResource ResourceKey=characterComparer}">
                                                        <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type roster:RosterExplorerView}}" Path="DataContext.Roster.AttackingCharacter"></Binding>
                                                        <Binding RelativeSource="{RelativeSource Self}" Path="DataContext"></Binding>
                                                    </MultiBinding>
                                                </DataTrigger.Binding>
                                                <Setter Property="Visibility" Value="Visible"></Setter>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                            
                            <TextBlock Grid.Column="2" FontFamily="{StaticResource FontFamily_FontAwesome}" 
                                   Text="&#xf140;" 
                                   HorizontalAlignment="Right" VerticalAlignment="Center">
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                        <Style.Triggers>
                                            <DataTrigger Value="True">
                                                <DataTrigger.Binding>
                                                    <MultiBinding Converter="{StaticResource ResourceKey=AttackInstructionsDefenderWithTargetCharacterComparer}">
                                                        <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type roster:RosterExplorerView}}" Path="DataContext.Roster.CurrentAttackInstructions"></Binding>
                                                        <Binding RelativeSource="{RelativeSource Self}" Path="DataContext"></Binding>
                                                    </MultiBinding>
                                                </DataTrigger.Binding>
                                                <Setter Property="Visibility" Value="Visible"></Setter>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                        </StackPanel>
                        
                        <StackPanel Grid.Column="3" Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Center">
                            <TextBlock FontFamily="{StaticResource FontFamily_FontAwesome}" 
                                       Text="&#xf119;" HorizontalAlignment="Right" VerticalAlignment="Center"
                                       cal:Action.TargetWithoutContext="{Binding Source={StaticResource BindingProxy}, Path=Data}"
                                                    cal:Message.Attach="[Event MouseLeftButtonUp] = UpdateCharacterState($dataContext, 'Stunned')">
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                        <Style.Triggers>
                                            <DataTrigger Value="True">
                                                <DataTrigger.Binding>
                                                    <MultiBinding Converter="{StaticResource ResourceKey=ActiveStateToVisibilityConverter}">
                                                        <Binding Source="{x:Static abilities:DefaultAbilities.STUNNED}"></Binding>
                                                        <Binding RelativeSource="{RelativeSource Self}" Path="DataContext"></Binding>
                                                        <Binding Path="ActiveStates.Count"></Binding>
                                                    </MultiBinding>
                                                </DataTrigger.Binding>
                                                <Setter Property="Visibility" Value="Visible"></Setter>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                                <i:Interaction.Triggers>
                                    <local:InputBindingTrigger>
                                        <local:InputBindingTrigger.InputBinding>
                                            <MouseBinding MouseAction="LeftClick"/>
                                        </local:InputBindingTrigger.InputBinding>
                                        <cal:ActionMessage MethodName="UpdateCharacterState">
                                            <cal:Parameter Value="$dataContext" />
                                            <cal:Parameter Value="Stunned" />
                                        </cal:ActionMessage>
                                    </local:InputBindingTrigger>
                                </i:Interaction.Triggers>
                            </TextBlock>
                            <TextBlock FontFamily="{StaticResource FontFamily_FontAwesome}" 
                                       Text="&#xf236;" HorizontalAlignment="Right" VerticalAlignment="Center">
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                        <Style.Triggers>
                                            <DataTrigger Value="True">
                                                <DataTrigger.Binding>
                                                    <MultiBinding Converter="{StaticResource ResourceKey=ActiveStateToVisibilityConverter}">
                                                        <Binding Source="{x:Static abilities:DefaultAbilities.UNCONSCIOUS}"></Binding>
                                                        <Binding RelativeSource="{RelativeSource Self}" Path="DataContext"></Binding>
                                                        <Binding Path="ActiveStates.Count"></Binding>
                                                    </MultiBinding>
                                                </DataTrigger.Binding>
                                                <Setter Property="Visibility" Value="Visible"></Setter>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                                <i:Interaction.Triggers>
                                    <local:InputBindingTrigger>
                                        <local:InputBindingTrigger.InputBinding>
                                            <MouseBinding MouseAction="LeftClick"/>
                                        </local:InputBindingTrigger.InputBinding>
                                        <cal:ActionMessage MethodName="UpdateCharacterState">
                                            <cal:Parameter Value="$dataContext" />
                                            <cal:Parameter Value="Unconscious" />
                                        </cal:ActionMessage>
                                    </local:InputBindingTrigger>
                                </i:Interaction.Triggers>
                            </TextBlock>
                            <TextBlock FontFamily="{StaticResource FontFamily_FontAwesome}"  
                                       Text="&#xf0f9;" HorizontalAlignment="Right" VerticalAlignment="Center">
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                        <Style.Triggers>
                                            <DataTrigger Value="True">
                                                <DataTrigger.Binding>
                                                    <MultiBinding Converter="{StaticResource ResourceKey=ActiveStateToVisibilityConverter}">
                                                        <Binding Source="{x:Static abilities:DefaultAbilities.DYING}"></Binding>
                                                        <Binding RelativeSource="{RelativeSource Self}" Path="DataContext"></Binding>
                                                        <Binding Path="ActiveStates.Count"></Binding>
                                                    </MultiBinding>
                                                </DataTrigger.Binding>
                                                <Setter Property="Visibility" Value="Visible"></Setter>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                                <i:Interaction.Triggers>
                                    <local:InputBindingTrigger>
                                        <local:InputBindingTrigger.InputBinding>
                                            <MouseBinding MouseAction="LeftClick"/>
                                        </local:InputBindingTrigger.InputBinding>
                                        <cal:ActionMessage MethodName="UpdateCharacterState">
                                            <cal:Parameter Value="$dataContext" />
                                            <cal:Parameter Value="Dying" />
                                        </cal:ActionMessage>
                                    </local:InputBindingTrigger>
                                </i:Interaction.Triggers>
                            </TextBlock>
                            <TextBlock FontFamily="{StaticResource FontFamily_FontAwesome}"  
                                       Text="&#xf011;" HorizontalAlignment="Right" VerticalAlignment="Center">
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                        <Style.Triggers>
                                            <DataTrigger Value="True">
                                                <DataTrigger.Binding>
                                                    <MultiBinding Converter="{StaticResource ResourceKey=ActiveStateToVisibilityConverter}">
                                                        <Binding Source="{x:Static abilities:DefaultAbilities.DEAD}"></Binding>
                                                        <Binding RelativeSource="{RelativeSource Self}" Path="DataContext"></Binding>
                                                        <Binding Path="ActiveStates.Count"></Binding>
                                                    </MultiBinding>
                                                </DataTrigger.Binding>
                                                <Setter Property="Visibility" Value="Visible"></Setter>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                                <i:Interaction.Triggers>
                                    <local:InputBindingTrigger>
                                        <local:InputBindingTrigger.InputBinding>
                                            <MouseBinding MouseAction="LeftClick"/>
                                        </local:InputBindingTrigger.InputBinding>
                                        <cal:ActionMessage MethodName="UpdateCharacterState">
                                            <cal:Parameter Value="$dataContext" />
                                            <cal:Parameter Value="Dead" />
                                        </cal:ActionMessage>
                                    </local:InputBindingTrigger>
                                </i:Interaction.Triggers>
                            </TextBlock>
                        </StackPanel>
                    </Grid>
                </DataTemplate>
            </ListBox.ItemTemplate>
        </library:MultiSelectListBox>
    </Grid>
</UserControl>
