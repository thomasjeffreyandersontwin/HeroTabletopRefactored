<UserControl x:Class="HeroVirtualTabletop.AnimatedAbility.AbilityEditorView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:behaviors="clr-namespace:Framework.WPF.Behaviors;assembly=Framework.WPF"
             xmlns:animatedability="clr-namespace:HeroVirtualTabletop.AnimatedAbility"
             xmlns:abilities="clr-namespace:HeroVirtualTabletop.AnimatedAbility;assembly=HeroVirtualTabletop"     
             xmlns:managedcharacter="clr-namespace:HeroVirtualTabletop.ManagedCharacter"
             xmlns:crowd="clr-namespace:HeroVirtualTabletop.Crowd"
             xmlns:bindings="clr-namespace:Framework.WPF.Binding;assembly=Framework.WPF"
             xmlns:cal="http://www.caliburnproject.org"
             xmlns:characters="clr-namespace:HeroVirtualTabletop.ManagedCharacter;assembly=HeroVirtualTabletop"
             xmlns:extensions="clr-namespace:Framework.WPF.Extensions;assembly=Framework.WPF"
             xmlns:local="clr-namespace:HeroUI"
             xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
             xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
             xmlns:system="clr-namespace:System;assembly=mscorlib"
             xmlns:forms="clr-namespace:System.Windows.Forms;assembly=System.Windows.Forms"
             mc:Ignorable="d" Loaded="AbilityEditorView_Loaded">
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/HeroResourceDictionary.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <abilities:AnimationTypeToAnimationIconTextConverter x:Key="AnimationTypeToAnimationIconTextConverter"/>
            <local:EnumToBooleanConverter x:Key="EnumToBooleanConverter"/>
            <local:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
            <local:BooleanToVisibilityInvertConverter x:Key="BooleanToVisibilityInvertConverter"/>
            <local:StringComparerToVisibilityConverter x:Key="resourcesTypeConverter"></local:StringComparerToVisibilityConverter>
            <ObjectDataProvider x:Key="Keys" MethodName="GetValues"
                            ObjectType="{x:Type system:Enum}">
                <ObjectDataProvider.MethodParameters>
                    <x:Type TypeName="forms:Keys"/>
                </ObjectDataProvider.MethodParameters>
            </ObjectDataProvider>
            <bindings:BindingProxy x:Key="BindingProxy" Data="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=managedcharacter:CharacterActionGroupView}, Path=DataContext}"/>
        </ResourceDictionary>
    </UserControl.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition />
        </Grid.ColumnDefinitions>
        <Button x:Name="CloseEditor" Grid.Row="0" Grid.Column="2"  HorizontalAlignment="Right" Content="&#xf00d;" ToolTip="Close"  Margin="0,0,2,0" Style="{StaticResource CloseButtonStyle}"/>
        <Grid Grid.Row="1" Grid.Column="0">
            <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition/>
                <RowDefinition/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>
            <Grid Grid.Column="0" Grid.Row="0" VerticalAlignment="Center" Margin="5,0,0,0">
                <TextBox x:Name="textBlockName" Text="{Binding Path=CurrentAbility.Name}" Style="{StaticResource SelectableTextBlockLikeStyle}">
                    <i:Interaction.Triggers>
                        <local:InputBindingTrigger>
                            <local:InputBindingTrigger.InputBinding>
                                <KeyBinding Key="Space"/>
                            </local:InputBindingTrigger.InputBinding>
                            <cal:ActionMessage MethodName="EnterAbilityEditMode">
                                <cal:Parameter Value="{Binding ElementName=textBlockName}" />
                            </cal:ActionMessage>
                        </local:InputBindingTrigger>
                        <local:InputBindingTrigger>
                            <local:InputBindingTrigger.InputBinding>
                                <MouseBinding MouseAction="LeftDoubleClick"/>
                            </local:InputBindingTrigger.InputBinding>
                            <cal:ActionMessage MethodName="EnterAbilityEditMode">
                                <cal:Parameter Value="{Binding ElementName=textBlockName}" />
                            </cal:ActionMessage>
                        </local:InputBindingTrigger>
                    </i:Interaction.Triggers>
                </TextBox>
                <TextBox Name="textBoxName" Visibility="Hidden" Text="{Binding Path=CurrentAbility.Name, UpdateSourceTrigger=Explicit}" cal:Message.Attach="[Event LostFocus] = [Action SubmitAbilityRename($source)]">
                    <i:Interaction.Triggers>
                        <local:InputBindingTrigger>
                            <local:InputBindingTrigger.InputBinding>
                                <KeyBinding Key="Return"/>
                            </local:InputBindingTrigger.InputBinding>
                            <cal:ActionMessage MethodName="SubmitAbilityRename">
                                <cal:Parameter Value="{Binding ElementName=textBoxName}" />
                            </cal:ActionMessage>
                        </local:InputBindingTrigger>
                        <local:InputBindingTrigger>
                            <local:InputBindingTrigger.InputBinding>
                                <KeyBinding Key="Esc"/>
                            </local:InputBindingTrigger.InputBinding>
                            <cal:ActionMessage MethodName="CancelAbilityEditMode">
                                <cal:Parameter Value="{Binding ElementName=textBoxName}" />
                            </cal:ActionMessage>
                        </local:InputBindingTrigger>
                    </i:Interaction.Triggers>
                </TextBox>
            </Grid>
            <Grid Grid.Row="1" Grid.Column="0" VerticalAlignment="Center">
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <CheckBox Grid.Row="0" Grid.Column="0" cal:Message.Attach="ChangePersistence()" IsChecked="{Binding CurrentAbility.Persistent}" Content="Persistent"  HorizontalAlignment="Left" Visibility="{Binding IsAnimationElementSelected, Converter={StaticResource BooleanToVisibilityInvertConverter}}"/>
                <CheckBox Grid.Row="0" Grid.Column="0" cal:Message.Attach="ChangePersistence()" IsChecked="{Binding SelectedAnimationElement.Persistent}" Content="Persistent"  HorizontalAlignment="Left" Visibility="{Binding IsAnimationElementSelected, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                <CheckBox x:Name="ToggleAreaEffectAttack" Grid.Row="0" Grid.Column="1" IsChecked="{Binding IsAreaEffect}" IsEnabled="{Binding IsAttack}" Content="Area Effect"  HorizontalAlignment="Left" Command="{Binding SaveAbilityCommand}"/>
                <CheckBox x:Name="ToggleAttack" Grid.Row="0" Grid.Column="2" IsChecked="{Binding IsAttack}" Content="Attack" Command="{Binding ToggleAttackCommand}" HorizontalAlignment="Left"/>
                <CheckBox Grid.Row="0" Grid.Column="3" Name="chkBoxIsNonDirectionalFx" IsChecked="{Binding CurrentFxElement.IsNonDirectional, Converter={StaticResource InvertBooleanConverter}}" Content="Directional" Command="{Binding ToggleDirectionalFxCommand}" Visibility="{Binding IsFxElementSelected, Converter={StaticResource BooleanToVisibilityConverter}}" HorizontalAlignment="Left"/>
                <TextBlock Grid.Row="1" Grid.Column="0" Text="Sequence" HorizontalAlignment="Left" VerticalAlignment="Center" Style="{StaticResource TextBlockDefaultStyle}"/>
                <RadioButton cal:Message.Attach="SaveAbility()" Grid.Row="1" Grid.Column="1" Content="And" IsChecked="{Binding Path=CurrentAbility.Type, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter=And}" GroupName="AbilityGroup" HorizontalAlignment="Left" VerticalAlignment="Center" Visibility="{Binding IsSequenceAbilitySelected, Converter={StaticResource BooleanToVisibilityInvertConverter}}"/>
                <RadioButton cal:Message.Attach="SaveAbility()" Grid.Row="1" Grid.Column="2" Content="Or" IsChecked="{Binding Path=CurrentAbility.Type, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter=Or}" GroupName="AbilityGroup" HorizontalAlignment="Left" VerticalAlignment="Center" Visibility="{Binding IsSequenceAbilitySelected, Converter={StaticResource BooleanToVisibilityInvertConverter}}"/>
                <RadioButton cal:Message.Attach="SaveSequence()" Grid.Row="1" Grid.Column="1" Content="And" IsChecked="{Binding Path=CurrentSequenceElement.Type, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter=And}" GroupName="SequenceAnimationGroup" HorizontalAlignment="Left" VerticalAlignment="Center" Visibility="{Binding IsSequenceAbilitySelected, Converter={StaticResource BooleanToVisibilityConverter}}" />
                <RadioButton cal:Message.Attach="SaveSequence()" Grid.Row="1" Grid.Column="2" Content="Or" IsChecked="{Binding Path=CurrentSequenceElement.Type, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter=Or}" GroupName="SequenceAnimationGroup" HorizontalAlignment="Left" VerticalAlignment="Center" Visibility="{Binding IsSequenceAbilitySelected, Converter={StaticResource BooleanToVisibilityConverter}}" />
                <CheckBox x:Name="ConfigureUnitPause" Grid.Row="1" Grid.Column="3" VerticalAlignment="Center" IsChecked="{Binding CurrentPauseElement.IsUnitPause}" Visibility="{Binding IsPauseElementSelected, Converter={StaticResource BooleanToVisibilityConverter}}" IsEnabled="{Binding IsAttack}" Content="Unit Pause"  HorizontalAlignment="Left"/>
            </Grid>
            <Grid Grid.Row="2" Grid.Column="0" VerticalAlignment="Center" Visibility="{Binding ElementName=ConfigureUnitPause, Path=IsChecked, Converter={StaticResource BooleanToVisibilityConverter}}">
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
                    <Grid ToolTip="Delay for 10 unit distance">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Text="Close" Foreground="White" Margin="3 2 0 0" />
                        <xctk:IntegerUpDown Grid.Column="1" Increment="1" DefaultValue="100" Minimum="0" Value="{Binding CurrentPauseElement.CloseDistanceDelay}" cal:Message.Attach="[Event ValueChanged] = [Action SaveAbility()]"/>
                    </Grid>
                    <Grid ToolTip="Delay for 20 unit distance">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Text="Short" Foreground="White" Margin="3 2 0 0" />
                        <xctk:IntegerUpDown Grid.Column="1" Increment="1" DefaultValue="60" Minimum="0" Value="{Binding CurrentPauseElement.ShortDistanceDelay}" cal:Message.Attach="[Event ValueChanged] = [Action SaveAbility()]"/>
                    </Grid>
                    <Grid ToolTip="Delay for 50 unit distance">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Text="Medium" Foreground="White"/>
                        <xctk:IntegerUpDown Grid.Column="1" Increment="1" DefaultValue="30" Minimum="0" Value="{Binding CurrentPauseElement.MediumDistanceDelay}" cal:Message.Attach="[Event ValueChanged] = [Action SaveAbility()]"/>
                    </Grid>
                    <Grid ToolTip="Delay for 100 unit distance">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Text="Long" Foreground="White"/>
                        <xctk:IntegerUpDown Grid.Column="1" Increment="1" DefaultValue="20" Minimum="0" Value="{Binding CurrentPauseElement.LongDistanceDelay}" cal:Message.Attach="[Event ValueChanged] = [Action SaveAbility()]"/>
                    </Grid>
                </StackPanel>
            </Grid>
        </Grid>
        <Grid Grid.Row="1" Grid.Column="1" HorizontalAlignment="Right" VerticalAlignment="Top">
            <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>
            <StackPanel Orientation="Horizontal" Grid.Row="0" HorizontalAlignment="Right" VerticalAlignment="Top" Grid.ColumnSpan="2">
                <StackPanel.Resources>
                    <Style TargetType="Button" BasedOn="{StaticResource ResourceKey=IconButton}"></Style>
                </StackPanel.Resources>
                <Button x:Name="AddMovElement" Content="&#xf008;" ToolTip="Add Move (Alt+Plus+M)" />
                <Button x:Name="AddFXElement" Content="&#xf0d0;" ToolTip="Add FX (Alt+Plus+F)"/>
                <Button x:Name="AddSoundElement" Content="&#xf001;" ToolTip="Add Sound (Alt+Plus+S)"/>
                <Button x:Name="AddReferenceElement" Content="&#xf08e;" ToolTip="Add Reference (Alt+Plus+R)" />
                <Button x:Name="AddSequenceElement" Content="&#xf126;" ToolTip="Add Sequence (Alt+Plus+Q)"/>
                <Button x:Name="AddPauseElement" Content="&#xf04c;" ToolTip="Add Pause (Alt+Plus+P)"/>
                <Button x:Name="DemoAnimatedAbility" Content="&#xf04b;" ToolTip="Demo Ability (Alt+Enter)" />
            </StackPanel>
            <TextBlock Text="Activation Key" Grid.Row="1" Grid.Column="0" VerticalAlignment="Center" Style="{StaticResource TextBlockDefaultStyle}"/>
            <ComboBox Grid.Row="1" Grid.Column="1" Margin="2" IsEnabled="{Binding CanEditAbilityOptions}"
                          Name="cbBoxActivateOnKey" ItemsSource="{Binding AvailableKeys}"
                          SelectedValue="{Binding Path=CurrentAbility.ActivateOnKey}">
                <behaviors:CommandBehaviorCollection.Behaviors>
                    <behaviors:BehaviorBinding Event="SelectionChanged" Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=animatedability:AbilityEditorView}, Path=DataContext.SaveAbilityCommand}"/>
                </behaviors:CommandBehaviorCollection.Behaviors>
            </ComboBox>
        </Grid>

        <StackPanel Orientation="Horizontal" Grid.Row="2" Grid.Column="0" HorizontalAlignment="Left" >
            <StackPanel.Resources>
                <Style TargetType="Button" BasedOn="{StaticResource ResourceKey=IconButton}"></Style>
            </StackPanel.Resources>
            <Button x:Name="CloneAnimation" Content="&#xf0c5;" ToolTip="Clone (Alt+Ctrl+C)"/>
            <Button x:Name="CutAnimation" Content="&#xf0c4;" ToolTip="Cut (Alt+Ctrl+X)"/>
            <Button x:Name="PasteAnimation" Content="&#xf0ea;" ToolTip="Paste (Alt+Ctrl+V)"/>
            <Button x:Name="RemoveAnimation" Content="&#xf056;" ToolTip="Remove (Alt+Ctrl+Backspace)" />
            <Button x:Name="DemoAnimation" Content="&#xf04b;" ToolTip="Demo Animation (Alt+Ctrl+Enter)" />
            <Button x:Name="ConfigureAttack" Grid.Column="0" Content="&#xf0e7;" ToolTip="Attack (Alt+Ctrl+A)" Margin="2">
                <Button.Style >
                    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource IconButton}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Path=IsConfiguringOnHit}" Value="False">
                                <Setter Property="Opacity" Value="1"/>
                            </DataTrigger>
                            <DataTrigger  Binding="{Binding Path=IsConfiguringOnHit}" Value="True">
                                <Setter Property="Opacity" Value="0.5"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>
            <Button x:Name="ConfigureOnHit" Grid.Column="1" Content="&#xf132;" ToolTip="On Hit (Alt+Ctrl+H)" Margin="2">
                <Button.Style >
                    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource IconButton}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Path=IsConfiguringOnHit}" Value="False">
                                <Setter Property="Opacity" Value="0.5"/>
                            </DataTrigger>
                            <DataTrigger  Binding="{Binding Path=IsConfiguringOnHit}" Value="True">
                                <Setter Property="Opacity" Value="1"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>
        </StackPanel>
        <Grid Grid.Row="2" Grid.Column="1">
            <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition />
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <StackPanel Grid.Column="0" Orientation="Vertical" VerticalAlignment="Center" Grid.RowSpan="2">
                <CheckBox x:Name="ChangePlayWithNext" IsEnabled="{Binding CanPlayWithNext}" IsChecked="{Binding SelectedAnimationElement.PlayWithNext}" Content="Play W/ Next" HorizontalAlignment="Left" />
                <CheckBox Name="chkBoxPlayOnTargeted" IsChecked="{Binding PlayOnTargeted}" Content="Play On Targeted" HorizontalAlignment="Left" />
            </StackPanel>
            <!--<ComboBox Grid.Column="1" Name="cmbBoxAnimationResource" HorizontalAlignment="Stretch" Margin="5"/>-->
            <TextBox Grid.Column="1" Grid.RowSpan="2" Height="Auto" Name="txtBoxAnimationResourceFilter" HorizontalAlignment="Stretch" Margin="5"
                     Text="{Binding AnimatedResourceMananger.Filter, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"></TextBox>
            <RadioButton Grid.Row="0" Grid.Column="2" Content="Link" IsChecked="{Binding Path=CopyReference, Converter={StaticResource InvertBooleanConverter}}" GroupName="ReferenceAnimationGroup" HorizontalAlignment="Left" VerticalAlignment="Center" Visibility="{Binding IsReferenceAbilitySelected, Converter={StaticResource BooleanToVisibilityConverter}}"/>
            <RadioButton x:Name="UpdateReferenceType" Grid.Row="1" Grid.Column="2" Content="Copy" IsChecked="{Binding Path=CopyReference}" GroupName="ReferenceAnimationGroup" HorizontalAlignment="Left" VerticalAlignment="Center" Visibility="{Binding IsReferenceAbilitySelected, Converter={StaticResource BooleanToVisibilityConverter}}"/>
        </Grid>
        <TreeView x:Name="treeViewAnimations" Grid.Row="3" Grid.Column="0" ItemsSource="{Binding CurrentAbility.AnimationElements}" Style="{StaticResource ResourceKey=SearchableTreeView}" AllowDrop="True"
                  PreviewMouseDown="treeViewAnimations_OnPreviewMouseDown" PreviewKeyUp="treeViewAnimations_PreviewKeyUp" BorderBrush="#FF1144FF" BorderThickness="1" Margin="5" MaxWidth="300"
                  PreviewMouseMove="treeViewAnimations_PreviewMouseMove" PreviewDragEnter="treeViewAnimations_PreviewDragEnter" PreviewDrop="treeViewAnimations_PreviewDrop"
                  extensions:DragDropExtension.ScrollOnDragDrop="True" IsEnabled="{Binding CanEditAbilityOptions}"
                  cal:Message.Attach="[Event SelectedItemChanged] = [Action UpdateSelectedAnimation($source)]"
                  >
            <TreeView.Resources>
                <HierarchicalDataTemplate DataType="{x:Type abilities:SequenceElementImpl}"
                                    ItemsSource="{Binding AnimationElements}"
                                    >
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Grid.Column="0" FontFamily="{StaticResource FontFamily_FontAwesome}" Text="{Binding AnimationElementType, Converter={StaticResource AnimationTypeToAnimationIconTextConverter}}" HorizontalAlignment="Center" VerticalAlignment="Center">
                        </TextBlock>
                        <Grid Grid.Column="1" VerticalAlignment="Center" Margin="5,0,0,0">
                            <TextBox x:Name="textBlockAnimationElement" Text="{Binding Path=Name}" Style="{StaticResource SelectableTextBlockLikeStyle}" PreviewDragEnter="textBlockAnimationElementChild_PreviewDragEnter" PreviewDragOver="textBlockAnimationElement_PreviewDragOver" PreviewDrop="textBlockAnimationElement_PreviewDrop">
                                <i:Interaction.Triggers>
                                    <local:InputBindingTrigger>
                                        <local:InputBindingTrigger.InputBinding>
                                            <KeyBinding Key="Space"/>
                                        </local:InputBindingTrigger.InputBinding>
                                        <cal:ActionMessage MethodName="EnterAnimationElementEditMode">
                                            <cal:Parameter Value="{Binding ElementName=textBlockAnimationElement}" />
                                        </cal:ActionMessage>
                                    </local:InputBindingTrigger>
                                    <local:InputBindingTrigger>
                                        <local:InputBindingTrigger.InputBinding>
                                            <KeyBinding Key="Delete"/>
                                        </local:InputBindingTrigger.InputBinding>
                                        <cal:ActionMessage MethodName="RemoveAnimation">
                                        </cal:ActionMessage>
                                    </local:InputBindingTrigger>
                                    <local:InputBindingTrigger>
                                        <local:InputBindingTrigger.InputBinding>
                                            <MouseBinding MouseAction="LeftDoubleClick"/>
                                        </local:InputBindingTrigger.InputBinding>
                                        <cal:ActionMessage MethodName="EnterAnimationElementEditMode">
                                            <cal:Parameter Value="{Binding ElementName=textBlockAnimationElement}" />
                                        </cal:ActionMessage>
                                    </local:InputBindingTrigger>
                                </i:Interaction.Triggers>
                            </TextBox>
                            <TextBox x:Name="textBoxAnimationElement" Visibility="Hidden" MinWidth="100"
                                         Text="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=animatedability:AbilityEditorView}, Path=DataContext.EditableAnimationDisplayName, UpdateSourceTrigger=Explicit}"
                                     cal:Message.Attach="[Event LostFocus] = [Action SubmitAnimationElementRename($source)]">
                                <i:Interaction.Triggers>
                                    <local:InputBindingTrigger>
                                        <local:InputBindingTrigger.InputBinding>
                                            <KeyBinding Key="Return"/>
                                        </local:InputBindingTrigger.InputBinding>
                                        <cal:ActionMessage MethodName="SubmitAnimationElementRename">
                                            <cal:Parameter Value="{Binding ElementName=textBoxAnimationElement}" />
                                        </cal:ActionMessage>
                                    </local:InputBindingTrigger>
                                    <local:InputBindingTrigger>
                                        <local:InputBindingTrigger.InputBinding>
                                            <KeyBinding Key="Esc"/>
                                        </local:InputBindingTrigger.InputBinding>
                                        <cal:ActionMessage MethodName="CancelAnimationElementEditMode">
                                            <cal:Parameter Value="{Binding ElementName=textBoxAnimationElement}" />
                                        </cal:ActionMessage>
                                    </local:InputBindingTrigger>
                                </i:Interaction.Triggers>
                            </TextBox>
                        </Grid>
                    </Grid>
                </HierarchicalDataTemplate>

                <DataTemplate DataType="{x:Type abilities:AnimationElementImpl}" >
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Grid.Column="0" FontFamily="{StaticResource FontFamily_FontAwesome}" Text="{Binding AnimationElementType, Converter={StaticResource AnimationTypeToAnimationIconTextConverter}}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        <Grid Grid.Column="1" VerticalAlignment="Center" Margin="5,0,0,0">
                            <TextBox x:Name="textBlockAnimationElementChild" Text="{Binding Path=Name}" Style="{StaticResource SelectableTextBlockLikeStyle}" PreviewDragEnter="textBlockAnimationElementChild_PreviewDragEnter" PreviewDragOver="textBlockAnimationElement_PreviewDragOver" PreviewDrop="textBlockAnimationElement_PreviewDrop">
                                <i:Interaction.Triggers>
                                    <local:InputBindingTrigger>
                                        <local:InputBindingTrigger.InputBinding>
                                            <KeyBinding Key="Space"/>
                                        </local:InputBindingTrigger.InputBinding>
                                        <cal:ActionMessage MethodName="EnterAnimationElementEditMode">
                                            <cal:Parameter Value="{Binding ElementName=textBlockAnimationElementChild}" />
                                        </cal:ActionMessage>
                                    </local:InputBindingTrigger>
                                    <local:InputBindingTrigger>
                                        <local:InputBindingTrigger.InputBinding>
                                            <KeyBinding Key="Delete"/>
                                        </local:InputBindingTrigger.InputBinding>
                                        <cal:ActionMessage MethodName="RemoveAnimation">
                                        </cal:ActionMessage>
                                    </local:InputBindingTrigger>
                                    <local:InputBindingTrigger>
                                        <local:InputBindingTrigger.InputBinding>
                                            <MouseBinding MouseAction="LeftDoubleClick"/>
                                        </local:InputBindingTrigger.InputBinding>
                                        <cal:ActionMessage MethodName="EnterAnimationElementEditMode">
                                            <cal:Parameter Value="{Binding ElementName=textBlockAnimationElementChild}" />
                                        </cal:ActionMessage>
                                    </local:InputBindingTrigger>
                                </i:Interaction.Triggers>
                            </TextBox>
                            <TextBox x:Name="textBoxAnimationElementChild" Visibility="Hidden" MinWidth="100" 
                                             Text="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=animatedability:AbilityEditorView}, Path=DataContext.EditableAnimationDisplayName, UpdateSourceTrigger=Explicit}"
                                     cal:Message.Attach="[Event LostFocus] = [Action SubmitAnimationElementRename($source)]">
                                <i:Interaction.Triggers>
                                    <local:InputBindingTrigger>
                                        <local:InputBindingTrigger.InputBinding>
                                            <KeyBinding Key="Return"/>
                                        </local:InputBindingTrigger.InputBinding>
                                        <cal:ActionMessage MethodName="SubmitAnimationElementRename">
                                            <cal:Parameter Value="{Binding ElementName=textBoxAnimationElementChild}" />
                                        </cal:ActionMessage>
                                    </local:InputBindingTrigger>
                                    <local:InputBindingTrigger>
                                        <local:InputBindingTrigger.InputBinding>
                                            <KeyBinding Key="Esc"/>
                                        </local:InputBindingTrigger.InputBinding>
                                        <cal:ActionMessage MethodName="CancelAnimationElementEditMode">
                                            <cal:Parameter Value="{Binding ElementName=textBoxAnimationElementChild}" />
                                        </cal:ActionMessage>
                                    </local:InputBindingTrigger>
                                </i:Interaction.Triggers>
                            </TextBox>
                        </Grid>
                    </Grid>
                </DataTemplate>
            </TreeView.Resources>
            <i:Interaction.Triggers>
                <local:InputBindingTrigger>
                    <local:InputBindingTrigger.InputBinding>
                        <KeyBinding Key="Esc"/>
                    </local:InputBindingTrigger.InputBinding>
                    <cal:ActionMessage MethodName="UpdateSelectedAnimation">
                        <cal:Parameter Value="{x:Null}"/>
                    </cal:ActionMessage>
                </local:InputBindingTrigger>
            </i:Interaction.Triggers>
        </TreeView>
        <Grid Grid.Row="3" Grid.Column="1">
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Grid x:Name="resourcesGrid" Grid.Row="0">
                <DataGrid x:Name="dataGridMOVResources" 
                          MaxWidth="400"
                          Background="Transparent" RowBackground="Transparent" Margin="5" BorderBrush="#FF1144FF"
                          Visibility="{Binding Path=SelectedAnimationElement.AnimationElementType, Converter={StaticResource resourcesTypeConverter}, ConverterParameter=Mov, FallbackValue=Collapsed}"
                          ItemsSource="{Binding AnimatedResourceMananger.MOVResourcesCVS.View}"
                          SelectionUnit="FullRow" AutoGenerateColumns="False"
                          SelectionMode="Single" IsEnabled="{Binding CanEditAbilityOptions}"
                          SelectedValue="{Binding SelectedAnimationElement.Mov, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                          IsSynchronizedWithCurrentItem="True" CanUserResizeRows="False" 
                      >
                    <i:Interaction.Behaviors>
                        <behaviors:ScrollIntoViewForDataGrid />
                    </i:Interaction.Behaviors>
                    <DataGrid.Resources>
                        <Style TargetType="DataGridCell">
                            <Setter Property="Foreground" Value="White"></Setter>
                            <Style.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="Background" Value="#FF1144FF" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </DataGrid.Resources>
                    <DataGrid.Columns>
                        <DataGridTextColumn Header="Tag" Binding="{Binding Tag}"></DataGridTextColumn>
                        <DataGridTemplateColumn Width="200" Header="Name">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding Name}" TextTrimming="CharacterEllipsis"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <!--<DataGridTextColumn Header="Name" Binding="{Binding Name}" IsReadOnly="True"></DataGridTextColumn>-->
                        <DataGridTextColumn Header="Resource" Binding="{Binding FullResourcePath}" IsReadOnly="True"></DataGridTextColumn>
                    </DataGrid.Columns>
                </DataGrid>
                <DataGrid x:Name="dataGridFXResources"
                          MaxWidth="400"
                          Background="Transparent" RowBackground="Transparent" Margin="5" BorderBrush="#FF1144FF"
                          Visibility="{Binding Path=SelectedAnimationElement.AnimationElementType, Converter={StaticResource resourcesTypeConverter}, ConverterParameter=FX, FallbackValue=Collapsed}"
                          ItemsSource="{Binding AnimatedResourceMananger.FXResourcesCVS.View}"
                          SelectionUnit="FullRow" AutoGenerateColumns="False"
                          SelectionMode="Single" IsEnabled="{Binding CanEditAbilityOptions}"
                          SelectedValue="{Binding SelectedAnimationElement.FX, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                          IsSynchronizedWithCurrentItem="True" CanUserResizeRows="False"
                      >
                    <i:Interaction.Behaviors>
                        <behaviors:ScrollIntoViewForDataGrid />
                    </i:Interaction.Behaviors>
                    <DataGrid.Resources>
                        <Style TargetType="DataGridCell">
                            <Setter Property="Foreground" Value="White"></Setter>
                            <Style.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="Background" Value="#FF1144FF" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </DataGrid.Resources>
                    <DataGrid.Columns>
                        <DataGridTextColumn Header="Tag" Binding="{Binding Tag}"></DataGridTextColumn>
                        <DataGridTextColumn Header="Name" Binding="{Binding Name}" IsReadOnly="True"></DataGridTextColumn>
                        <DataGridTextColumn Header="Resource" Binding="{Binding FullResourcePath}" IsReadOnly="True"></DataGridTextColumn>
                    </DataGrid.Columns>
                </DataGrid>
                <DataGrid x:Name="dataGridSoundResources"
                          MaxWidth="400"
                          Background="Transparent" RowBackground="Transparent" Margin="5" BorderBrush="#FF1144FF"
                          Visibility="{Binding Path=SelectedAnimationElement.AnimationElementType, Converter={StaticResource resourcesTypeConverter}, ConverterParameter=Sound, FallbackValue=Collapsed}"
                          ItemsSource="{Binding AnimatedResourceMananger.SoundResourcesCVS.View}"
                          SelectionUnit="FullRow" AutoGenerateColumns="False"
                          SelectionMode="Single" IsEnabled="{Binding CanEditAbilityOptions}"
                          SelectedValue="{Binding SelectedAnimationElement.Sound, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                          IsSynchronizedWithCurrentItem="True" CanUserResizeRows="False"
                      >
                    <i:Interaction.Behaviors>
                        <behaviors:ScrollIntoViewForDataGrid />
                    </i:Interaction.Behaviors>
                    <DataGrid.Resources>
                        <Style TargetType="DataGridCell">
                            <Setter Property="Foreground" Value="White"></Setter>
                            <Style.Triggers>
                                <Trigger Property="DataGridCell.IsSelected" Value="True">
                                    <Setter Property="Background" Value="#FF1144FF" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </DataGrid.Resources>
                    <DataGrid.Columns>
                        <DataGridTextColumn Header="Tag" Binding="{Binding Tag}"></DataGridTextColumn>
                        <DataGridTextColumn Header="Name" Binding="{Binding Name}" IsReadOnly="True"></DataGridTextColumn>
                        <DataGridTextColumn Header="Resource" Binding="{Binding FullResourcePath}" IsReadOnly="True"></DataGridTextColumn>
                    </DataGrid.Columns>
                </DataGrid>
                <DataGrid x:Name="dataGridAbilityReferences"
                          MaxWidth="400"
                          Background="Transparent" RowBackground="Transparent" Margin="5" BorderBrush="#FF1144FF"
                          Visibility="{Binding Path=SelectedAnimationElement.AnimationElementType, Converter={StaticResource resourcesTypeConverter}, ConverterParameter=Reference, FallbackValue=Collapsed}"
                          ItemsSource="{Binding AnimatedResourceMananger.ReferenceElementsCVS.View}"
                          SelectionUnit="FullRow" AutoGenerateColumns="False" IsEnabled="{Binding CanEditAbilityOptions}"
                          SelectionMode="Single" CanUserResizeRows="False"
                          SelectedValue="{Binding SelectedAnimationElement.Reference, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                          PreviewMouseDown="dataGridAbilityReferences_PreviewMouseDown" PreviewMouseMove="dataGridAbilityReferences_PreviewMouseMove"
                      >
                    <i:Interaction.Behaviors>
                        <behaviors:ScrollIntoViewForDataGrid />
                    </i:Interaction.Behaviors>
                    <DataGrid.Resources>
                        <Style TargetType="DataGridCell">
                            <Setter Property="Foreground" Value="White"></Setter>
                            <Style.Triggers>
                                <Trigger Property="DataGridCell.IsSelected" Value="True">
                                    <Setter Property="Background" Value="#FF1144FF" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </DataGrid.Resources>
                    <DataGrid.Columns>
                        <DataGridTextColumn Header="Character" Binding="{Binding Character.Name}" Width="auto" IsReadOnly="True"></DataGridTextColumn>
                        <DataGridTextColumn Header="Ability" Binding="{Binding Ability.Name}" Width="*" IsReadOnly="True"></DataGridTextColumn>
                    </DataGrid.Columns>
                </DataGrid>
            </Grid>
            <Grid x:Name="colorsGrid" Grid.Row="1" 
                  Visibility="{Binding Path=SelectedAnimationElement.AnimationElementType, Converter={StaticResource resourcesTypeConverter}, ConverterParameter=FX, FallbackValue=Collapsed}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition></ColumnDefinition>
                    <ColumnDefinition></ColumnDefinition>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Grid.Resources>
                    <Style TargetType="WrapPanel">
                        <Setter Property="HorizontalAlignment" Value="Center"></Setter>
                    </Style>
                    <Style TargetType="Label">
                        <Setter Property="Foreground" Value="White"></Setter>
                        <Setter Property="VerticalContentAlignment" Value="Center"></Setter>
                    </Style>
                    <Style TargetType="xctk:ColorPicker">
                        <Setter Property="Margin" Value="5"></Setter>
                        <Setter Property="ColorMode" Value="ColorCanvas"></Setter>
                    </Style>
                </Grid.Resources>
                <WrapPanel Grid.Column="0" Grid.Row="0">
                    <Label>Color 1:</Label>
                    <xctk:ColorPicker Width="50" IsEnabled="{Binding CanEditAbilityOptions}"
                        SelectedColor="{Binding SelectedAnimationElement.Color1, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"></xctk:ColorPicker>
                </WrapPanel>
                <WrapPanel Grid.Column="1" Grid.Row="0">
                    <Label>Color 2:</Label>
                    <xctk:ColorPicker Width="50" IsEnabled="{Binding CanEditAbilityOptions}"
                        SelectedColor="{Binding SelectedAnimationElement.Color2, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"></xctk:ColorPicker>
                </WrapPanel>
                <WrapPanel Grid.Column="0" Grid.Row="1">
                    <Label>Color 3:</Label>
                    <xctk:ColorPicker Width="50" IsEnabled="{Binding CanEditAbilityOptions}"
                        SelectedColor="{Binding SelectedAnimationElement.Color3, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"></xctk:ColorPicker>
                </WrapPanel>
                <WrapPanel Grid.Column="1" Grid.Row="1">
                    <Label>Color 4:</Label>
                    <xctk:ColorPicker Width="50" IsEnabled="{Binding CanEditAbilityOptions}"
                        SelectedColor="{Binding SelectedAnimationElement.Color4, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"></xctk:ColorPicker>
                </WrapPanel>
            </Grid>
        </Grid>
        <i:Interaction.Triggers>
            <local:InputBindingTrigger>
                <local:InputBindingTrigger.InputBinding>
                    <KeyBinding Key="Delete"/>
                </local:InputBindingTrigger.InputBinding>
                <cal:ActionMessage MethodName="RemoveAnimation">
                </cal:ActionMessage>
            </local:InputBindingTrigger>
        </i:Interaction.Triggers>
    </Grid>

</UserControl>